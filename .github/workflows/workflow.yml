env:
  S3_BUCKET_NAME: ahchacha-build-s3
  PROJECT_NAME: AhChacha-Backend
  CODE_DEPLOY_APP_NAME: ahchacha
  CODE_DEPLOY_GROUP_NAME: ahchacha-deploy-group

name: AhChacha-Backend

on:
  push:
    branches:
      - 'develop'
      - 'main'
  pull_request:
    branches:
      - 'main'
      - 'develop'
  workflow_dispatch:
permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          server-id: github
          settings-path: ${{ github.workspace }}

      - name: Get current time
        uses: 1466587594/get-current-time@v2
        id: current-time
        with:
          format: YYYY-MM-DDTHH-mm-ss
          utcOffset: "+09:00"

      - name: Show Current Time
        run: echo "CurrentTime=${{steps.current-time.outputs.formattedTime}}"
        shell: bash

      ## gradle caching
      - name: Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      ## yml 파일 생성
      - name: make application.yml
        if: |
          contains(github.ref, 'main') ||
          contains(github.ref, 'develop')
        run: |
          cd ./src/main/resources               # resources 폴더로 이동
          touch ./application.yml               # application.yml 생성
          echo "${{ secrets.APPLICATION_YML }}" > ./application.yml             # github actions에서 설정한 값을 application.yml 파일에 쓰기
        shell: bash

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
        shell: bash

      - name: Build with Gradle
        run: ./gradlew clean -x test build
        shell: bash

      # docker build & push to dev
      - name: Docker build & push to develop
#        if: contains(github.ref, 'develop')
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -f Dockerfile-dev -t ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_IMAGE }} .
          docker push ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_IMAGE }}

      ## deploy to develop : EC2로 원격 접속 -> EC2에서 docker pull
      - name: Deploy
        uses: appleboy/ssh-action@master
        id: deploy-dev
        if: contains(github.ref, 'develop') || contains(github.ref, 'main')
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_HOST }}
#          password : ${{ secrets.EC2_PASSWORD }}
          port: ${{ secrets.EC2_PORT }}
          key: ${{ secrets.PRIVATE_KEY }}
          script: |
            sudo docker ps
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_IMAGE }}
            sudo docker run -d -p 8081:8081 ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_IMAGE }}
            sudo docker image prune -f


############################################
#      - name: Generate deployment package
#        run: |
#          mkdir -p before-deploy
#          cp scripts/*.sh before-deploy/
#          cp appspec.yml before-deploy/
#          cp build/libs/*.jar before-deploy/
#          cd before-deploy && zip -r before-deploy *
#          cd ../ && mkdir -p deploy
#          mv before-deploy/before-deploy.zip deploy/$PROJECT_NAME.zip
#        shell: bash
#
#      - name: Make zip file
#        run: zip -r ./$PROJECT_NAME.zip .
#        shell: bash
#
#      - name: Configure AWS credentials
#        uses: aws-actions/configure-aws-credentials@v1
#        with:
#          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          aws-region: ap-northeast-2
#
#      - name: Upload to S3
#        run: aws s3 cp --region ap-northeast-2 ./deploy/$PROJECT_NAME.zip s3://$S3_BUCKET_NAME/$PROJECT_NAME/$PROJECT_NAME.zip
#
#      - name: Code Deploy
#        run: aws deploy create-deployment --application-name $CODE_DEPLOY_APP_NAME --deployment-config-name CodeDeployDefault.AllAtOnce --deployment-group-name $CODE_DEPLOY_GROUP_NAME --s3-location bucket=$S3_BUCKET_NAME,bundleType=zip,key=$PROJECT_NAME/$PROJECT_NAME.zip
#